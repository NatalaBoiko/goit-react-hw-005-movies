{"version":3,"file":"static/js/247.a2ae4c96.chunk.js","mappings":"wSACAA,IAAAA,SAAAA,QAAyB,+BACzBA,IAAAA,SAAAA,OAAwB,CACtBC,QAAS,mCACTC,eAAe,GAIjB,IAAMC,EAAU,kCAEHC,EAAa,mCAAG,uGACpBJ,IAAAA,IAAA,sBAEJK,MAAK,qBAAGC,KAAQC,QACPC,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAoBC,EAA3B,EAAcC,YAAd,MAAyC,CACnDH,GAAAA,EACAC,MAAAA,EACAC,OAAQR,EAAUQ,SAGrBE,OAAM,SAAAC,GACLC,QAAQC,IAAIF,EAAMG,aAXK,2CAAH,qDAebC,EAAY,mCAAG,WAAMC,GAAN,0FACnBnB,IAAAA,IAAA,8BACuBmB,IAC3Bd,MAAK,qBAAGC,KAAQC,QACPC,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAoBC,EAA3B,EAAcC,YAAd,MAAyC,CACnDH,GAAAA,EACAC,MAAAA,EACAC,OAAQR,EAAUQ,SAGrBE,OAAM,SAAAC,GACLC,QAAQC,IAAIF,EAAMG,aAXI,2CAAH,sDAeZG,EAAoB,SAAAC,GAC/B,OAAOrB,IAAAA,IAAA,iBACUqB,EADV,MAEJhB,MACC,oBACEC,KACEG,EAFJ,EAEIA,GACaE,EAHjB,EAGIC,YACAF,EAJJ,EAIIA,MACcY,EALlB,EAKIC,aACcC,EANlB,EAMIC,aACAC,EAPJ,EAOIA,SACAC,EARJ,EAQIA,OARJ,MAUO,CACLlB,GAAAA,EACAE,OAAQR,EAAUQ,EAClBD,MAAAA,EACAY,YAAa,IAAIM,KAAKN,GAAaO,cACnCL,UAAWM,KAAKC,MAAkB,GAAZP,GACtBE,SAAAA,EACAC,OAAAA,MAGHd,OAAM,SAAAC,GACLC,QAAQC,IAAIF,EAAMG,aAIXe,EAAoB,SAAAX,GAC/B,OAAOrB,IAAAA,IAAA,iBACUqB,EADV,cAEJhB,MAAK,qBAAGC,KAAQ2B,KACVzB,KAAI,gBAAGC,EAAH,EAAGA,GAAIyB,EAAP,EAAOA,KAAMC,EAAb,EAAaA,UAAyBC,EAAtC,EAAwBC,aAAxB,MAAmD,CAC1D5B,GAAAA,EACAyB,KAAAA,EACAC,UAAAA,EACAC,MAAOjC,EAAUiC,SAGpBvB,OAAM,SAAAC,GACLC,QAAQC,IAAIF,EAAMG,c,0FC9CxB,UA9Ba,WACX,IAAQI,GAAYiB,EAAAA,EAAAA,IAAU,WAAtBjB,QACR,GAA8BkB,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KAMA,OAJAC,EAAAA,EAAAA,YAAU,YACRV,EAAAA,EAAAA,IAAkBX,GAAShB,KAAKoC,KAC/B,CAACpB,KAGF,iCACE,iCADF,IAEGmB,EAAQG,OAAS,GAChB,wBACGH,EAAQhC,KAAI,YAAqC,IAAlCC,EAAiC,EAAjCA,GAAIyB,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,UAAWC,EAAY,EAAZA,MACnC,OACE,2BACE,gBAAKQ,IAAKR,EAAOS,IAAKX,KACtB,wBAAKA,KACL,uCAAeC,OAHR1B,SASf,SAAC,UAAD,S,kDCnBR,UARiB,WACf,OACE,iCACE,sDACA,SAAC,KAAD,CAAMqC,GAAG,IAAT","sources":["api.js","components/Cast/Cast.jsx","pages/NotFound.jsx"],"sourcesContent":["import axios from 'axios';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.params = {\n  api_key: '2123fea73978ac77fe6a3f347cf7ced6',\n  include_adult: false,\n};\n\n// https://image.tmdb.org/t/p/w500/kqjL17yufvn9OVLyXYpvtyrFfak.jpg\nconst IMG_URL = 'https://image.tmdb.org/t/p/w500';\n\nexport const fetchTrending = async () => {\n  return axios\n    .get(`/trending/all/day?`)\n    .then(({ data: { results } }) =>\n      results.map(({ id, title, poster_path: poster }) => ({\n        id,\n        title,\n        poster: IMG_URL + poster,\n      }))\n    )\n    .catch(error => {\n      console.log(error.message);\n    });\n};\n\nexport const fetchByQuery = async query => {\n  return axios\n    .get(`/search/movie?query=${query}`)\n    .then(({ data: { results } }) =>\n      results.map(({ id, title, poster_path: poster }) => ({\n        id,\n        title,\n        poster: IMG_URL + poster,\n      }))\n    )\n    .catch(error => {\n      console.log(error.message);\n    });\n};\n\nexport const fetchMovieDetails = movieId => {\n  return axios\n    .get(`/movie/${movieId}?`)\n    .then(\n      ({\n        data: {\n          id,\n          poster_path: poster,\n          title,\n          release_date: releaseYear,\n          vote_average: userScore,\n          overview,\n          genres,\n        },\n      }) => ({\n        id,\n        poster: IMG_URL + poster,\n        title,\n        releaseYear: new Date(releaseYear).getFullYear(),\n        userScore: Math.round(userScore * 10),\n        overview,\n        genres,\n      })\n    )\n    .catch(error => {\n      console.log(error.message);\n    });\n};\n\nexport const fetchMovieCredits = movieId => {\n  return axios\n    .get(`/movie/${movieId}/credits?`)\n    .then(({ data: { cast } }) =>\n      cast.map(({ id, name, character, profile_path: photo }) => ({\n        id,\n        name,\n        character,\n        photo: IMG_URL + photo,\n      }))\n    )\n    .catch(error => {\n      console.log(error.message);\n    });\n};\n\nexport const fetchMovieReviews = movieId => {\n  return axios\n    .get(`/movie/${movieId}/reviews?`)\n    .then(({ data: { results } }) =>\n      results.map(({ id, author, content }) => ({\n        id,\n        author,\n        content,\n      }))\n    )\n    .catch(error => {\n      console.log(error.message);\n    });\n};\n","import { fetchMovieCredits } from '../../api';\nimport NotFound from '../../pages/NotFound';\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nconst Cast = () => {\n  const { movieId } = useParams('movieId');\n  const [credits, setCredits] = useState([]);\n\n  useEffect(() => {\n    fetchMovieCredits(movieId).then(setCredits);\n  }, [movieId]);\n\n  return (\n    <>\n      <h2>Cast</h2>;\n      {credits.length > 0 ? (\n        <ul>\n          {credits.map(({ id, name, character, photo }) => {\n            return (\n              <li key={id}>\n                <img src={photo} alt={name} />\n                <h3>{name}</h3>\n                <p>Character: {character}</p>\n              </li>\n            );\n          })}\n        </ul>\n      ) : (\n        <NotFound />\n      )}\n    </>\n  );\n};\n\nexport default Cast;\n","import { Link } from 'react-router-dom';\n\nconst NotFound = () => {\n  return (\n    <>\n      <h2>Oops... nothing found...</h2>\n      <Link to=\"/\">Back to home</Link>\n    </>\n  );\n};\nexport default NotFound;\n"],"names":["axios","api_key","include_adult","IMG_URL","fetchTrending","then","data","results","map","id","title","poster","poster_path","catch","error","console","log","message","fetchByQuery","query","fetchMovieDetails","movieId","releaseYear","release_date","userScore","vote_average","overview","genres","Date","getFullYear","Math","round","fetchMovieCredits","cast","name","character","photo","profile_path","useParams","useState","credits","setCredits","useEffect","length","src","alt","to"],"sourceRoot":""}